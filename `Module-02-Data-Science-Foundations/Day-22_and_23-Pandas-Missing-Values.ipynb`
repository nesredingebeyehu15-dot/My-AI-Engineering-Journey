{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN2giALAN5fj/jb3kUlKJS1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nesredingebeyehu15-dot/My-AI-Engineering-Journey/blob/main/%60Module-02-Data-Science-Foundations/Day-22_and_23-Pandas-Missing-Values.ipynb%60\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3udLAbkiXizv",
        "outputId": "f4ef49d2-ec49-48ab-b175-0e8828e74bc6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Initial Messy Data ---\n",
            "  product_name  price_usd  units_sold\n",
            "0       Laptop     1200.0       150.0\n",
            "1        Mouse       25.0       200.0\n",
            "2     Keyboard       75.0       180.0\n",
            "3      Monitor        NaN       120.0\n",
            "4       Webcam       40.0         NaN\n",
            "------------------------------\n",
            "--- 2. Investigating Missing Values ---\n",
            "Count of missing (NaN) values in each column:\n",
            "product_name    0\n",
            "price_usd       1\n",
            "units_sold      1\n",
            "dtype: int64\n",
            "------------------------------\n",
            "--- 3. Cleaning the Data... ---\n",
            "Action: Missing prices will be filled with the mean value ($335.00)\n",
            "Action: Missing units sold will be filled with 0.\n",
            "------------------------------\n",
            "--- 4. Final Cleaned Data ---\n",
            "  product_name  price_usd  units_sold\n",
            "0       Laptop     1200.0       150.0\n",
            "1        Mouse       25.0       200.0\n",
            "2     Keyboard       75.0       180.0\n",
            "3      Monitor      335.0       120.0\n",
            "4       Webcam       40.0         0.0\n",
            "\n",
            "Final check for any remaining missing values:\n",
            "product_name    0\n",
            "price_usd       0\n",
            "units_sold      0\n",
            "dtype: int64\n",
            "\n",
            "Conclusion: The data is now clean and ready for analysis!\n"
          ]
        }
      ],
      "source": [
        "# ======================================================================\n",
        "# PROJECT: Cleaning Product Data for a Fictional Online Store\n",
        "# GOAL:    To handle missing values (NaN) in a realistic product dataset.\n",
        "# AUTHOR:  Nesredin Gebeyehu\n",
        "# DATE:    ጥቅምት 13, 2018\n",
        "# ======================================================================\n",
        "\n",
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# --- STEP 1: SETUP - Create the initial \"messy\" DataFrame ---\n",
        "print(\"--- 1. Initial Messy Data ---\")\n",
        "product_data = {\n",
        "    'product_name': ['Laptop', 'Mouse', 'Keyboard', 'Monitor', 'Webcam'],\n",
        "    'price_usd': [1200, 25, 75, np.nan, 40],\n",
        "    'units_sold': [150, 200, 180, 120, np.nan]\n",
        "}\n",
        "products_df = pd.DataFrame(product_data)\n",
        "print(products_df)\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# --- STEP 2: INVESTIGATION - Find where the problems are ---\n",
        "print(\"--- 2. Investigating Missing Values ---\")\n",
        "print(\"Count of missing (NaN) values in each column:\")\n",
        "print(products_df.isnull().sum())\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# --- STEP 3: CLEANING - Apply logical fixes ---\n",
        "print(\"--- 3. Cleaning the Data... ---\")\n",
        "cleaned_df = products_df.copy()\n",
        "\n",
        "# Fix the 'price_usd' column\n",
        "# LOGIC: A reasonable guess for a missing price is the average of others.\n",
        "mean_price = cleaned_df['price_usd'].mean()\n",
        "print(f\"Action: Missing prices will be filled with the mean value (${mean_price:.2f})\")\n",
        "cleaned_df['price_usd'] = cleaned_df['price_usd'].fillna(mean_price)\n",
        "\n",
        "# Fix the 'units_sold' column\n",
        "# LOGIC: A missing 'units_sold' likely means 0 sales. This is a safe assumption.\n",
        "print(\"Action: Missing units sold will be filled with 0.\")\n",
        "cleaned_df['units_sold'] = cleaned_df['units_sold'].fillna(0)\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# --- STEP 4: VERIFICATION - Confirm that the data is now clean ---\n",
        "print(\"--- 4. Final Cleaned Data ---\")\n",
        "print(cleaned_df)\n",
        "\n",
        "print(\"\\nFinal check for any remaining missing values:\")\n",
        "print(cleaned_df.isnull().sum())\n",
        "print(\"\\nConclusion: The data is now clean and ready for analysis!\")"
      ]
    }
  ]
}